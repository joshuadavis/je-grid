<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>EnterGrid - Enterprise Grid Computing for Java</title> 
  </header> 
  <body> 
    <section id="background">
      <title>Background</title>
      <p>The Java Enterprise (J2EE) framework is designed applications that require the server to process lots of
      very small requests, typically with database transactions.
      While this is <i>great</i> for OLTP and web based applications, which most applications are, it
      doesn't provide much help for applications that have compute-bound, long running processes.   These
      are more suited for traditional 'batch processing' systems.   EnterGrid is designed for this special case.
      It provides 'batch processing' services that can be scaled economically using COTS hardware and isolates
      the hardware from the software design.
      </p>
      <p>For example, financial applications often require this type of compte-bound processing for simulations and
      risk calculations.   A J2EE server is a great front end OLTP for entering data, but running the number-crunching
      code on the same hardware as the OLTP / web UI will definitely cause performance degradation.   In this situation,
      EnterGrid can be used to build a back end layer that will provide batch processing and parallel processing on
      a separate group of machines dedicated for this type of task.  This separation allows the OLTP/web UI system
      to be respond rapidly to requests while the compute grid is operating relatively un-interrupted.</p>
    </section>
  </body>
</document>
